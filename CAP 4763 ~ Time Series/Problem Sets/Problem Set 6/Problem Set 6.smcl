{smcl}
{com}{sf}{ul off}{txt}{.-}
      name:  {res}<unnamed>
       {txt}log:  {res}/Users/guslipkin/Documents/Spring2020/CAP 4763 ~ Time Series/Problem Sets/Problem Set 6/Problem Set 6.smcl
  {txt}log type:  {res}smcl
 {txt}opened on:  {res}26 Apr 2021, 20:58:56
{txt}
{com}. import delimited "Assignment_1_Monthly.txt"
{res}{text}(5 vars, 984 obs)

{com}. 
. rename lnu02300000 us_epr
{res}{txt}
{com}. rename flnan fl_nonfarm
{res}{txt}
{com}. rename fllfn fl_lf
{res}{txt}
{com}. rename flbppriv fl_bp
{res}{txt}
{com}. rename date datestring
{res}{txt}
{com}. 
. gen datec=date(datestring, "YMD")
{txt}
{com}. gen date=mofd(datec)
{txt}
{com}. gen month=month(datec)
{txt}
{com}. format date %tm
{txt}
{com}. 
. tsset date
{res}{txt}{col 9}time variable:  {res}{col 25}date, 1939m1 to 2020m12
{txt}{col 17}delta:  {res}1 month
{txt}
{com}. 
. gen lnusepr=log(us_epr)
{txt}(108 missing values generated)

{com}. gen lnflnonfarm=log(fl_nonfarm)
{txt}
{com}. gen lnfllf=log(fl_lf)
{txt}(444 missing values generated)

{com}. gen lnflbp=log(fl_bp)
{txt}(588 missing values generated)

{com}. 
. drop if !tin(1990m1,2019m12)
{txt}(624 observations deleted)

{com}. 
. tsset date
{res}{txt}{col 9}time variable:  {res}{col 25}date, 1990m1 to 2019m12
{txt}{col 17}delta:  {res}1 month
{txt}
{com}. tsappend, add(12)
{txt}
{com}. replace month=month(dofm(date))
{txt}(12 real changes made)

{com}. 
. gen m1=0
{txt}
{com}. replace m1=1 if month==1
{txt}(31 real changes made)

{com}. gen m2=0
{txt}
{com}. replace m2=1 if month==2
{txt}(31 real changes made)

{com}. gen m3=0
{txt}
{com}. replace m3=1 if month==3
{txt}(31 real changes made)

{com}. gen m4=0
{txt}
{com}. replace m4=1 if month==4
{txt}(31 real changes made)

{com}. gen m5=0
{txt}
{com}. replace m5=1 if month==5
{txt}(31 real changes made)

{com}. gen m6=0
{txt}
{com}. replace m6=1 if month==6
{txt}(31 real changes made)

{com}. gen m7=0
{txt}
{com}. replace m7=1 if month==7
{txt}(31 real changes made)

{com}. gen m8=0
{txt}
{com}. replace m8=1 if month==8
{txt}(31 real changes made)

{com}. gen m9=0
{txt}
{com}. replace m9=1 if month==9
{txt}(31 real changes made)

{com}. gen m10=0
{txt}
{com}. replace m10=1 if month==10
{txt}(31 real changes made)

{com}. gen m11=0
{txt}
{com}. replace m11=1 if month==11
{txt}(31 real changes made)

{com}. 
. gen dlnflnonfarm=d.lnflnonfarm
{txt}(13 missing values generated)

{com}. gen l1dlnflnonfarm=l1d.lnflnonfarm
{txt}(13 missing values generated)

{com}. gen l2dlnflnonfarm=l2d.lnflnonfarm
{txt}(13 missing values generated)

{com}. gen l3dlnflnonfarm=l3d.lnflnonfarm
{txt}(13 missing values generated)

{com}. gen l4dlnflnonfarm=l4d.lnflnonfarm
{txt}(13 missing values generated)

{com}. gen l5dlnflnonfarm=l5d.lnflnonfarm
{txt}(13 missing values generated)

{com}. gen l6dlnflnonfarm=l6d.lnflnonfarm
{txt}(13 missing values generated)

{com}. gen l7dlnflnonfarm=l7d.lnflnonfarm
{txt}(13 missing values generated)

{com}. gen l8dlnflnonfarm=l8d.lnflnonfarm
{txt}(13 missing values generated)

{com}. gen l9dlnflnonfarm=l9d.lnflnonfarm
{txt}(13 missing values generated)

{com}. gen l10dlnflnonfarm=l10d.lnflnonfarm
{txt}(13 missing values generated)

{com}. gen l11dlnflnonfarm=l11d.lnflnonfarm
{txt}(13 missing values generated)

{com}. gen l12dlnflnonfarm=l12d.lnflnonfarm
{txt}(13 missing values generated)

{com}. gen l24dlnflnonfarm=l24d.lnflnonfarm
{txt}(25 missing values generated)

{com}. 
. gen dlnfllf=d.lnfllf
{txt}(13 missing values generated)

{com}. gen l1dlnfllf=l1d.lnfllf
{txt}(13 missing values generated)

{com}. gen l2dlnfllf=l2d.lnfllf
{txt}(13 missing values generated)

{com}. gen l3dlnfllf=l3d.lnfllf
{txt}(13 missing values generated)

{com}. gen l4dlnfllf=l4d.lnfllf
{txt}(13 missing values generated)

{com}. gen l5dlnfllf=l5d.lnfllf
{txt}(13 missing values generated)

{com}. gen l6dlnfllf=l6d.lnfllf
{txt}(13 missing values generated)

{com}. gen l7dlnfllf=l7d.lnfllf
{txt}(13 missing values generated)

{com}. gen l8dlnfllf=l8d.lnfllf
{txt}(13 missing values generated)

{com}. gen l9dlnfllf=l9d.lnfllf
{txt}(13 missing values generated)

{com}. gen l10dlnfllf=l10d.lnfllf
{txt}(13 missing values generated)

{com}. gen l11dlnfllf=l11d.lnfllf
{txt}(13 missing values generated)

{com}. gen l12dlnfllf=l12d.lnfllf
{txt}(13 missing values generated)

{com}. gen l24dlnfllf=l24d.lnfllf
{txt}(25 missing values generated)

{com}. 
. gen dlnusepr=d.lnusepr
{txt}(13 missing values generated)

{com}. gen l1dlnusepr=l1d.lnusepr
{txt}(13 missing values generated)

{com}. gen l2dlnusepr=l2d.lnusepr
{txt}(13 missing values generated)

{com}. gen l3dlnusepr=l3d.lnusepr
{txt}(13 missing values generated)

{com}. gen l4dlnusepr=l4d.lnusepr
{txt}(13 missing values generated)

{com}. gen l5dlnusepr=l5d.lnusepr
{txt}(13 missing values generated)

{com}. gen l6dlnusepr=l6d.lnusepr
{txt}(13 missing values generated)

{com}. gen l7dlnusepr=l7d.lnusepr
{txt}(13 missing values generated)

{com}. gen l8dlnusepr=l8d.lnusepr
{txt}(13 missing values generated)

{com}. gen l9dlnusepr=l9d.lnusepr
{txt}(13 missing values generated)

{com}. gen l10dlnusepr=l10d.lnusepr
{txt}(13 missing values generated)

{com}. gen l11dlnusepr=l11d.lnusepr
{txt}(13 missing values generated)

{com}. gen l12dlnusepr=l12d.lnusepr
{txt}(13 missing values generated)

{com}. gen l24dlnusepr=l24d.lnusepr
{txt}(25 missing values generated)

{com}. 
. gen dh2lnflnonfarm = lnflnonfarm - l2.lnflnonfarm
{txt}(14 missing values generated)

{com}. gen dh4lnflnonfarm = lnflnonfarm - l4.lnflnonfarm
{txt}(16 missing values generated)

{com}. gen dh6lnflnonfarm = lnflnonfarm - l6.lnflnonfarm
{txt}(18 missing values generated)

{com}. 
. /*
> *h=2
> 
> gsreg dh2lnflnonfarm l3dlnflnonfarm l6dlnflnonfarm l9dlnflnonfarm ///
>           l3dlnfllf l6dlnfllf l9dlnfllf ///
>           l3dlnusepr l6dlnusepr l9dlnusepr if tin(1990m1,2019m12), ///
>         ncomb(1,8) aic outsample(24) fix(m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11) ///
>         samesample nindex( -1 aic -1 bic -1 rmse_out) results(gsreg_dlnh2) replace
> 
> /*
> dh2lnflnonfarm l6dlnflnonfarm l9dlnflnonfarm l3dlnfllf l6dlnfllf l3dlnusepr l6dlnusepr
>         m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11
>  */
> 
> *h=4
> 
> gsreg dh4lnflnonfarm l6dlnflnonfarm l9dlnflnonfarm l12dlnflnonfarm ///
>           l6dlnfllf l9dlnfllf l12dlnfllf ///
>           l6dlnusepr l9dlnusepr l12dlnusepr if tin(1990m1,2019m12), ///
>         ncomb(1,8) aic outsample(24) fix(m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11) ///
>         samesample nindex( -1 aic -1 bic -1 rmse_out) results(gsreg_dlnh4) replace
> 
> /*
> dh4lnflnonfarm l6dlnflnonfarm l9dlnflnonfarm l12dlnflnonfarm l6dlnfllf l9dlnfllf
>         l6dlnusepr l9dlnusepr m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11
> */
> 
> *h=6
> 
> gsreg dh4lnflnonfarm l6dlnflnonfarm l9dlnflnonfarm l12dlnflnonfarm l24dlnflnonfarm ///
>           l6dlnfllf l9dlnfllf l12dlnfllf l24dlnfllf ///
>           l6dlnusepr l9dlnusepr l12dlnusepr l24dlnusepr if tin(1990m1,2019m12), ///
>         ncomb(1,8) aic outsample(24) fix(m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11) ///
>         samesample nindex( -1 aic -1 bic -1 rmse_out) results(gsreg_dlnh6) replace
> 
> /*
> dh6lnflnonfarm l6dlnflnonfarm l9dlnflnonfarm l12dlnflnonfarm l6dlnfllf l9dlnfllf
>         l6dlnusepr l9dlnusepr m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11
> */
> 
> *h2
> scalar drop _all
> quietly forval w=48(12)180 {c -(}
> gen pred=.
> gen nobs=.
>         forval t=565/720 {c -(} 
>         gen wstart=`t'-`w'
>         gen wend=`t'-1
>         reg d.lnflnonfarm l(6,9)d.lnflnonfarm l(3,6)d.lnfllf l(3,6)d.lnusepr ///
>                 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 ///
>                 if date>=wstart & date<=wend
>         replace nobs=e(N) if date==`t'
>         predict ptemp
>         replace pred=ptemp if date==`t'
>         drop ptemp wstart wend
>         {c )-}
> gen errsq=(pred-d.lnflnonfarm)^2
> summ errsq
> scalar RWrmse`w'=r(mean)^.5
> summ nobs
> scalar RWminobs`w'=r(min)
> scalar RWmaxobs`w'=r(max)
> drop errsq pred nobs
> {c )-}
> scalar list
> /*
> RWmaxobs96 =         96
> RWminobs96 =         96
> RWrmse96 =  .00372845
> */
> scalar rwrmseH2 = .00372845
> 
> *h4
> scalar drop _all
> quietly forval w=48(12)180 {c -(}
> gen pred=.
> gen nobs=.
>         forval t=565/720 {c -(} 
>         gen wstart=`t'-`w'
>         gen wend=`t'-1
>         reg d.lnflnonfarm l(6,9,12)d.lnflnonfarm l(6,9)d.lnfllf l(6,9)d.lnusepr ///
>                 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 ///
>                 if date>=wstart & date<=wend
>         replace nobs=e(N) if date==`t'
>         predict ptemp
>         replace pred=ptemp if date==`t'
>         drop ptemp wstart wend
>         {c )-}
> gen errsq=(pred-d.lnflnonfarm)^2
> summ errsq
> scalar RWrmse`w'=r(mean)^.5
> summ nobs
> scalar RWminobs`w'=r(min)
> scalar RWmaxobs`w'=r(max)
> drop errsq pred nobs
> {c )-}
> scalar list
> /*
> RWmaxobs96 =         96
> RWminobs96 =         96
> RWrmse96 =  .00373399
> */
> scalar rwrmseH4 = .00373399
> 
> *h6
> scalar drop _all
> quietly forval w=48(12)180 {c -(}
> gen pred=.
> gen nobs=.
>         forval t=565/720 {c -(} 
>         gen wstart=`t'-`w'
>         gen wend=`t'-1
>         reg d.lnflnonfarm l(6,9,12)d.lnflnonfarm l(6,9)d.lnfllf l(6,9)d.lnusepr ///
>                 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 ///
>                 if date>=wstart & date<=wend
>         replace nobs=e(N) if date==`t'
>         predict ptemp
>         replace pred=ptemp if date==`t'
>         drop ptemp wstart wend
>         {c )-}
> gen errsq=(pred-d.lnflnonfarm)^2
> summ errsq
> scalar RWrmse`w'=r(mean)^.5
> summ nobs
> scalar RWminobs`w'=r(min)
> scalar RWmaxobs`w'=r(max)
> drop errsq pred nobs
> {c )-}
> scalar list
> /*
> RWmaxobs96 =         96
> RWminobs96 =         96
> RWrmse96 =  .00373399
> */
> 
> scalar rwrmseH2 = .00372845
> scalar rwrmseH4 = .00373399
> scalar rwrmseH6 = .00373399
> 
> *h2
> reg dh2lnflnonfarm l(6,9)d.lnflnonfarm l(3,6)d.lnfllf l(3,6)d.lnusepr ///
>                 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 if tin(2012m1,2019m12)
> predict pd
> gen pflnonfarm=exp((rwrmseH2^2)/2)*exp(l2.lnflnonfarm+pd) if date==tm(2020m2)
> gen ub1=exp((rwrmseH2^2)/2)*exp(l2.lnflnonfarm+pd+1*rwrmseH2) if date==tm(2020m2)
> gen lb1=exp((rwrmseH2^2)/2)*exp(l2.lnflnonfarm+pd-1*rwrmseH2) if date==tm(2020m2)
> gen ub2=exp((rwrmseH2^2)/2)*exp(l2.lnflnonfarm+pd+2*rwrmseH2) if date==tm(2020m2)
> gen lb2=exp((rwrmseH2^2)/2)*exp(l2.lnflnonfarm+pd-2*rwrmseH2) if date==tm(2020m2)
> gen ub3=exp((rwrmseH2^2)/2)*exp(l2.lnflnonfarm+pd+3*rwrmseH2) if date==tm(2020m2)
> gen lb3=exp((rwrmseH2^2)/2)*exp(l2.lnflnonfarm+pd-3*rwrmseH2) if date==tm(2020m2)
> drop pd
> 
> 
> *h4
> reg dh4lnflnonfarm l(6,9,12)d.lnflnonfarm l(6,9)d.lnfllf l(6,9)d.lnusepr ///
>                 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 if tin(2012m1,2019m12) 
> predict pd
> replace pflnonfarm=exp((rwrmseH4^2)/2)*exp(l4.lnflnonfarm+pd) if date==tm(2020m4)
> replace ub1=exp((rwrmseH4^2)/2)*exp(l4.lnflnonfarm+pd+1*rwrmseH4) if date==tm(2020m4)
> replace lb1=exp((rwrmseH4^2)/2)*exp(l4.lnflnonfarm+pd-1*rwrmseH4) if date==tm(2020m4)
> replace ub2=exp((rwrmseH4^2)/2)*exp(l4.lnflnonfarm+pd+2*rwrmseH4) if date==tm(2020m4)
> replace lb2=exp((rwrmseH4^2)/2)*exp(l4.lnflnonfarm+pd-2*rwrmseH4) if date==tm(2020m4)
> replace ub3=exp((rwrmseH4^2)/2)*exp(l4.lnflnonfarm+pd+3*rwrmseH4) if date==tm(2020m4)
> replace lb3=exp((rwrmseH4^2)/2)*exp(l4.lnflnonfarm+pd-3*rwrmseH4) if date==tm(2020m4)
> drop pd
> 
> *h6
> reg dh6lnflnonfarm l(6,9,12)d.lnflnonfarm l(6,9)d.lnfllf l(6,9)d.lnusepr ///
>                 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 if tin(2012m1,2019m12)
> predict pd 
> replace pflnonfarm=exp((rwrmseH6^2)/2)*exp(l6.lnflnonfarm+pd) if date==tm(2020m6)
> replace ub1=exp((rwrmseH6^2)/2)*exp(l6.lnflnonfarm+pd+1*rwrmseH6) if date==tm(2020m6)
> replace lb1=exp((rwrmseH6^2)/2)*exp(l6.lnflnonfarm+pd-1*rwrmseH6) if date==tm(2020m6)
> replace ub2=exp((rwrmseH6^2)/2)*exp(l6.lnflnonfarm+pd+2*rwrmseH6) if date==tm(2020m6)
> replace lb2=exp((rwrmseH6^2)/2)*exp(l6.lnflnonfarm+pd-2*rwrmseH6) if date==tm(2020m6)
> replace ub3=exp((rwrmseH6^2)/2)*exp(l6.lnflnonfarm+pd+3*rwrmseH6) if date==tm(2020m6)
> replace lb3=exp((rwrmseH6^2)/2)*exp(l6.lnflnonfarm+pd-3*rwrmseH6) if date==tm(2020m6)
> drop pd
> 
> replace pflnonfarm=fl_nonfarm if date==tm(2019m12)
> replace ub1=fl_nonfarm if date==tm(2019m12)
> replace ub2=fl_nonfarm if date==tm(2019m12)
> replace ub3=fl_nonfarm if date==tm(2019m12)
> replace lb1=fl_nonfarm if date==tm(2019m12)
> replace lb2=fl_nonfarm if date==tm(2019m12)
> replace lb3=fl_nonfarm if date==tm(2019m12)
> 
> 
> *Table
> list month pflnonfarm lb3 lb2 lb1 ub1 ub2 ub3 if tin(2019m12,2020m6)
> *ARDL Fan Chart
> twoway (tsrline ub3 ub2 if tin(2019m1,2020m6), ///
>         recast(rarea) fcolor(khaki) fintensity(20) lwidth(none) ) ///
>         (tsrline ub2 ub1 if tin(2019m1,2020m6), ///
>         recast(rarea) fcolor(khaki) fintensity(40) lwidth(none) ) ///
>         (tsrline ub1 pflnonfarm if tin(2019m1,2020m6), ///
>         recast(rarea) fcolor(khaki) fintensity(65) lwidth(none) ) ///
>         (tsrline pflnonfarm lb1 if tin(2019m1,2020m6), ///
>         recast(rarea) fcolor(khaki) fintensity(65) lwidth(none) ) ///
>         (tsrline lb1 lb2 if tin(2019m1,2020m6), ///
>         recast(rarea) fcolor(khaki) fintensity(40) lwidth(none) ) ///
>         (tsrline lb2 lb3 if tin(2019m1,2020m6), ///
>         recast(rarea) fcolor(khaki) fintensity(20) lwidth(none) ) ///
>         (tsline fl_nonfarm pflnonfarm if tin(2019m1,2020m6) , ///
>         lcolor(gs12 teal) lwidth(medthick medthick) ///
>         lpattern(solid longdash)) , scheme(s1mono) legend(off) ///
>         title("Florida Nonfarm Employment"  ///
>         "Forecast Fan Chart for 2, 4, and 6 Month Horizons") legend(off) ///
>         xtitle("") ylabel(,grid)  ///
>         note("Launch date is 2020m2" "Bands at 1, 2, and 3 sigma") ///
>         saving("ardl.gph", replace)
>         
> graph export "ardl.png", replace
>  
> /*
> Question 2
> */
> 
> gsreg dlnflnonfarm l2dlnflnonfarm l4dlnflnonfarm l6dlnflnonfarm ///
>         l8dlnflnonfarm l10dlnflnonfarm l12dlnflnonfarm l24dlnflnonfarm ///
>         l3dlnflnonfarm l5dlnflnonfarm l7dlnflnonfarm l9dlnflnonfarm l11dlnflnonfarm ///
>         if tin(1990m1,2019m12), ///
>         ncomb(1,8) aic outsample(24) fix(m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11) ///
>         samesample nindex( -1 aic -1 bic -1 rmse_out) results(gsreg_dlnh4) replace
>         
> /* 
> dlnflnonfarm l3dlnflnonfarm l4dlnflnonfarm l5dlnflnonfarm l6dlnflnonfarm 
>         l10dlnflnonfarm l12dlnflnonfarm l24dlnflnonfarm
> */
> 
> 
> scalar drop _all
> quietly forval w=48(12)180 {c -(}
> gen pred=.
> gen nobs=.
>         forval t=562/720 {c -(} 
>         gen wstart=`t'-`w'
>         gen wend=`t'-1
>         reg d.lnflnonfarm l(3/6,10,12,24)d.lnflnonfarm ///
>                 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 ///
>                 if date>=wstart & date<=wend
>         replace nobs=e(N) if date==`t'
>         predict ptemp
>         replace pred=ptemp if date==`t'
>         drop ptemp wstart wend
>         {c )-}
> gen errsq=(pred-d.lnflnonfarm)^2
> summ errsq
> scalar RWrmse`w'=r(mean)^.5
> summ nobs
> scalar RWminobs`w'=r(min)
> scalar RWmaxobs`w'=r(max)
> drop errsq pred nobs
> {c )-}
> scalar list
> 
> /*
> RWmaxobs108 =        108
> RWminobs108 =        108
> RWrmse108 =  .00355344
> */
> */
. arima d.lnflnonfarm l(3,4,5,6,10,12,24)d.lnflnonfarm ///
>         m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 if tin(1990m1,2019m12)

{txt}(setting optimization to BHHH)
{res}{txt}Iteration 0:{col 16}log likelihood = {res} 1419.1478{txt}  
{res}{txt}Iteration 1:{col 16}log likelihood = {res} 1419.1478{txt}  
{res}
{txt}ARIMA regression

Sample:  {res}1992m2 - 2019m12                       {txt}Number of obs     = {res}       335
                                                {txt}Wald chi2({res}18{txt})     =  {res}  1963.87
{txt}Log likelihood = {res} 1419.148                      {txt}Prob > chi2       =     {res}0.0000

{txt}{hline 13}{c TT}{hline 11}{hline 11}{hline 9}{hline 8}{hline 13}{hline 12}
{col 1}D.          {col 14}{c |}{col 26}      OPG
{col 1} lnflnonfarm{col 14}{c |}      Coef.{col 26}   Std. Err.{col 38}      z{col 46}   P>|z|{col 54}     [95% Con{col 67}f. Interval]
{hline 13}{c +}{hline 11}{hline 11}{hline 9}{hline 8}{hline 13}{hline 12}
{res}lnflnonfarm  {txt}{c |}
{space 1}lnflnonfarm {c |}
{space 8}L3D. {c |}{col 14}{res}{space 2} .2358398{col 26}{space 2} .0510963{col 37}{space 1}    4.62{col 46}{space 3}0.000{col 54}{space 4} .1356929{col 67}{space 3} .3359867
{txt}{space 8}L4D. {c |}{col 14}{res}{space 2} .1397295{col 26}{space 2} .0527405{col 37}{space 1}    2.65{col 46}{space 3}0.008{col 54}{space 4}   .03636{col 67}{space 3}  .243099
{txt}{space 8}L5D. {c |}{col 14}{res}{space 2} .0796456{col 26}{space 2} .0488336{col 37}{space 1}    1.63{col 46}{space 3}0.103{col 54}{space 4}-.0160664{col 67}{space 3} .1753576
{txt}{space 8}L6D. {c |}{col 14}{res}{space 2} .1211032{col 26}{space 2} .0586843{col 37}{space 1}    2.06{col 46}{space 3}0.039{col 54}{space 4} .0060841{col 67}{space 3} .2361223
{txt}{space 7}L10D. {c |}{col 14}{res}{space 2} -.149653{col 26}{space 2}   .04423{col 37}{space 1}   -3.38{col 46}{space 3}0.001{col 54}{space 4}-.2363422{col 67}{space 3}-.0629638
{txt}{space 7}L12D. {c |}{col 14}{res}{space 2} .3689681{col 26}{space 2} .0449547{col 37}{space 1}    8.21{col 46}{space 3}0.000{col 54}{space 4} .2808584{col 67}{space 3} .4570778
{txt}{space 7}L24D. {c |}{col 14}{res}{space 2}  .153853{col 26}{space 2} .0513259{col 37}{space 1}    3.00{col 46}{space 3}0.003{col 54}{space 4} .0532561{col 67}{space 3} .2544498
{txt}{space 12} {c |}
{space 10}m1 {c |}{col 14}{res}{space 2}-.0123309{col 26}{space 2} .0019717{col 37}{space 1}   -6.25{col 46}{space 3}0.000{col 54}{space 4}-.0161955{col 67}{space 3}-.0084664
{txt}{space 10}m2 {c |}{col 14}{res}{space 2}-.0045874{col 26}{space 2} .0020832{col 37}{space 1}   -2.20{col 46}{space 3}0.028{col 54}{space 4}-.0086704{col 67}{space 3}-.0005045
{txt}{space 10}m3 {c |}{col 14}{res}{space 2}-.0044397{col 26}{space 2} .0019187{col 37}{space 1}   -2.31{col 46}{space 3}0.021{col 54}{space 4}-.0082002{col 67}{space 3}-.0006792
{txt}{space 10}m4 {c |}{col 14}{res}{space 2}-.0040325{col 26}{space 2}  .002363{col 37}{space 1}   -1.71{col 46}{space 3}0.088{col 54}{space 4}-.0086639{col 67}{space 3} .0005989
{txt}{space 10}m5 {c |}{col 14}{res}{space 2}-.0069423{col 26}{space 2} .0022896{col 37}{space 1}   -3.03{col 46}{space 3}0.002{col 54}{space 4}-.0114299{col 67}{space 3}-.0024548
{txt}{space 10}m6 {c |}{col 14}{res}{space 2}-.0094868{col 26}{space 2} .0019228{col 37}{space 1}   -4.93{col 46}{space 3}0.000{col 54}{space 4}-.0132554{col 67}{space 3}-.0057182
{txt}{space 10}m7 {c |}{col 14}{res}{space 2}-.0069193{col 26}{space 2} .0018296{col 37}{space 1}   -3.78{col 46}{space 3}0.000{col 54}{space 4}-.0105052{col 67}{space 3}-.0033334
{txt}{space 10}m8 {c |}{col 14}{res}{space 2} .0003486{col 26}{space 2} .0018303{col 37}{space 1}    0.19{col 46}{space 3}0.849{col 54}{space 4}-.0032387{col 67}{space 3}  .003936
{txt}{space 10}m9 {c |}{col 14}{res}{space 2} .0011616{col 26}{space 2} .0017654{col 37}{space 1}    0.66{col 46}{space 3}0.511{col 54}{space 4}-.0022984{col 67}{space 3} .0046217
{txt}{space 9}m10 {c |}{col 14}{res}{space 2} .0041933{col 26}{space 2} .0016994{col 37}{space 1}    2.47{col 46}{space 3}0.014{col 54}{space 4} .0008625{col 67}{space 3} .0075241
{txt}{space 9}m11 {c |}{col 14}{res}{space 2} -.001529{col 26}{space 2} .0018164{col 37}{space 1}   -0.84{col 46}{space 3}0.400{col 54}{space 4}-.0050892{col 67}{space 3} .0020311
{txt}{space 7}_cons {c |}{col 14}{res}{space 2} .0038359{col 26}{space 2} .0013901{col 37}{space 1}    2.76{col 46}{space 3}0.006{col 54}{space 4} .0011114{col 67}{space 3} .0065605
{txt}{hline 13}{c +}{hline 11}{hline 11}{hline 9}{hline 8}{hline 13}{hline 12}
      /sigma {c |}{col 14}{res}{space 2} .0034993{col 26}{space 2} .0000962{col 37}{space 1}   36.36{col 46}{space 3}0.000{col 54}{space 4} .0033107{col 67}{space 3} .0036879
{txt}{hline 13}{c BT}{hline 11}{hline 11}{hline 9}{hline 8}{hline 13}{hline 12}
{p 0 6 0 79}Note: The test of the variance against zero is one sided, and the two-sided confidence interval is truncated at zero.{p_end}

{com}. predict pnonfarm, dynamic(tm(2020m1))
{txt}(option {bf:xb} assumed; predicted values)
(25 missing values generated)

{com}. predict mse, mse dynamic(mofd(tm(2020m1)))
{txt}
{com}. gen totmse = mse if date==tm(2020m1)
{txt}(371 missing values generated)

{com}. replace totmse = l.totmse+mse if date>tm(2020m1)
{txt}(11 real changes made)

{com}. gen pnonfarma = fl_nonfarm if date==tm(2019m12)
{txt}(371 missing values generated)

{com}. replace pnonfarma = l.pnonfarma*exp(pnonfarm+mse/2) if date>tm(2019m12)
{txt}(12 real changes made)

{com}. 
. gen ub1a = pnonfarma*exp(totmse^.5)
{txt}(360 missing values generated)

{com}. gen ub2a = pnonfarma*exp(2*totmse^.5)
{txt}(360 missing values generated)

{com}. gen ub3a = pnonfarma*exp(3*totmse^.5)
{txt}(360 missing values generated)

{com}. gen lb1a = pnonfarma/exp(totmse^.5)
{txt}(360 missing values generated)

{com}. gen lb2a = pnonfarma/exp(2*totmse^.5)
{txt}(360 missing values generated)

{com}. gen lb3a = pnonfarma/exp(3*totmse^.5)
{txt}(360 missing values generated)

{com}. 
. replace ub1a=fl_nonfarm if date == tm(2019m12)
{txt}(1 real change made)

{com}. replace ub2a=fl_nonfarm if date == tm(2019m12)
{txt}(1 real change made)

{com}. replace ub3a=fl_nonfarm if date == tm(2019m12)
{txt}(1 real change made)

{com}. replace lb1a=fl_nonfarm if date == tm(2019m12)
{txt}(1 real change made)

{com}. replace lb2a=fl_nonfarm if date == tm(2019m12)
{txt}(1 real change made)

{com}. replace lb3a=fl_nonfarm if date == tm(2019m12)
{txt}(1 real change made)

{com}. 
. twoway (tsrline ub3a ub2a if tin(2019m1,2020m6), ///
>         recast(rarea) fcolor(khaki) fintensity(20) lwidth(none) ) ///
>         (tsrline ub2a ub1a if tin(2019m1,2020m6), ///
>         recast(rarea) fcolor(khaki) fintensity(40) lwidth(none) ) ///
>         (tsrline ub1a pnonfarma if tin(2019m1,2020m6), ///
>         recast(rarea) fcolor(khaki) fintensity(65) lwidth(none) ) ///
>         (tsrline pnonfarma lb1a if tin(2019m1,2020m6), ///
>         recast(rarea) fcolor(khaki) fintensity(65) lwidth(none) ) ///
>         (tsrline lb1a lb2a if tin(2019m1,2020m6), ///
>         recast(rarea) fcolor(khaki) fintensity(40) lwidth(none) ) ///
>         (tsrline lb2a lb3a if tin(2019m1,2020m6), ///
>         recast(rarea) fcolor(khaki) fintensity(20) lwidth(none) ) ///
>         (tsline fl_nonfarm pnonfarma if tin(2019m1,2020m6) , ///
>         lcolor(gs12 teal) lwidth(medthick medthick) ///
>         lpattern(solid longdash)) , scheme(s1mono) legend(off) ///
>         saving("ar.gph", replace)
{res}{txt}(file ar.gph saved)

{com}.         
. graph export "ar.png", replace
{txt}(file /Users/guslipkin/Documents/Spring2020/CAP 4763 ~ Time Series/Problem Sets/Problem Set 6/ar.png written in PNG format)

{com}. 
. translate "Problem Set 6.smcl" "Problem Set 6.txt", replace
{txt}(file Problem Set 6.txt written in .txt format)

{com}. log close
      {txt}name:  {res}<unnamed>
       {txt}log:  {res}/Users/guslipkin/Documents/Spring2020/CAP 4763 ~ Time Series/Problem Sets/Problem Set 6/Problem Set 6.smcl
  {txt}log type:  {res}smcl
 {txt}closed on:  {res}26 Apr 2021, 20:58:58
{txt}{.-}
{smcl}
{txt}{sf}{ul off}